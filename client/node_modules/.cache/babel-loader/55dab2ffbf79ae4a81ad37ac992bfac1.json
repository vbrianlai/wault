{"ast":null,"code":"var _jsxFileName = \"/Users/brianlai/Desktop/wault/wault/src/App.js\";\nimport React, { Component } from 'react';\nimport Spotify from 'spotify-web-api-js';\nimport queryString from 'query-string';\nimport * as $ from \"jquery\";\nimport Player from \"./Player\";\nimport './App.css';\nimport SearchBar from './SearchBar';\nconst spotifyWebApi = new Spotify();\n\nclass App extends Component {\n  constructor(props) {\n    super(props); // Gets access token\n\n    const params = this.getHashParams();\n\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token);\n    }\n\n    this.state = {\n      loggedIn: params.access_token == spotifyWebApi.getAccessToken() ? true : false,\n      username: '',\n      nowPlaying: {\n        name: 'Not Checked',\n        image: ''\n      },\n      searchParams: ''\n    };\n    this.getNowPlaying = this.getNowPlaying.bind(this); // this.handleChange = this.handleChange.bind(this);\n    // this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n\n    return hashParams;\n  }\n\n  componentDidMount() {\n    // console.log(spotifyWebApi.getAccessToken());\n    // fetch('https://api.spotify.com/v1/me', {\n    //   headers: {\n    //     'Authorization': 'Bearer ' + spotifyWebApi.getAccessToken()\n    //   }\n    // }).then((response) => response.json())\n    // .then(data => {console.log(data)});\n    spotifyWebApi.getMe().then(res => {\n      this.setState({\n        username: res.display_name\n      });\n      console.log(res);\n    }); // spotifyWebApi.getMyRecentlyPlayedTracks()\n    //   .then(res => {\n    //       console.log(res);\n    //   });\n  }\n\n  getNowPlaying() {\n    spotifyWebApi.getMyCurrentPlaybackState().then(response => {\n      let song = response ? {\n        name: response.item.name,\n        image: response.item.album.images[0].url\n      } : {\n        name: 'unidentified',\n        image: 'unidentified'\n      };\n      this.setState({\n        nowPlaying: song\n      });\n    });\n  }\n\n  getUser() {\n    spotifyWebApi.getMe().then(response => {\n      this.setState({\n        username: response.display_name\n      });\n    });\n  }\n\n  render() {\n    // let user = spotifyWebApi.getMe().then( res => res.display_name);\n    console.log(this.state.username);\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, !this.state.loggedIn ? React.createElement(\"a\", {\n      href: \"http://localhost:8888\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Login with Spotify\")) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"You are logged in as \", this.state.username), React.createElement(\"a\", {\n      href: \"http://localhost:8888\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Login with a different Spotify account\"))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Now Playing: \", this.state.nowPlaying.name), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.nowPlaying.image,\n      style: {\n        width: 100\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      onClick: this.getNowPlaying,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Check Now Playing\"), React.createElement(SearchBar, {\n      token: spotifyWebApi.getAccessToken(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/brianlai/Desktop/wault/wault/src/App.js"],"names":["React","Component","Spotify","queryString","$","Player","SearchBar","spotifyWebApi","App","constructor","props","params","getHashParams","access_token","setAccessToken","state","loggedIn","getAccessToken","username","nowPlaying","name","image","searchParams","getNowPlaying","bind","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","componentDidMount","getMe","then","res","setState","display_name","console","log","getMyCurrentPlaybackState","response","song","item","album","images","url","getUser","render","width"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Spotify from 'spotify-web-api-js';\nimport queryString from 'query-string';\n\nimport * as $ from \"jquery\";\nimport Player from \"./Player\";\nimport './App.css';\nimport SearchBar from './SearchBar';\n\nconst spotifyWebApi = new Spotify();\n\n\nclass App extends Component{\n\n  constructor(props) {\n    super(props);\n\n    // Gets access token\n    const params = this.getHashParams();\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token);\n    }\n\n    this.state = {\n      loggedIn: params.access_token==spotifyWebApi.getAccessToken() ? true : false,\n      username: '',\n      nowPlaying: {\n        name: 'Not Checked',\n        image: ''\n      },\n      searchParams: ''\n    }\n\n    this.getNowPlaying = this.getNowPlaying.bind(this);\n    // this.handleChange = this.handleChange.bind(this);\n    // this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  \n  \n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    while ( e = r.exec(q)) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n\n  componentDidMount() {\n\n    // console.log(spotifyWebApi.getAccessToken());\n\n    // fetch('https://api.spotify.com/v1/me', {\n    //   headers: {\n    //     'Authorization': 'Bearer ' + spotifyWebApi.getAccessToken()\n    //   }\n    // }).then((response) => response.json())\n    // .then(data => {console.log(data)});\n    \n\n    spotifyWebApi.getMe()\n      .then(res => {\n          this.setState({username: res.display_name});\n          console.log(res);\n      });\n    \n    // spotifyWebApi.getMyRecentlyPlayedTracks()\n    //   .then(res => {\n    //       console.log(res);\n    //   });\n  }\n\n  getNowPlaying() {\n    spotifyWebApi.getMyCurrentPlaybackState()\n      .then(response => {\n        let song = response ? {name: response.item.name, image: response.item.album.images[0].url} : {name: 'unidentified', image : 'unidentified'}\n        this.setState({nowPlaying: song});\n      })\n  }\n\n  getUser() {\n    spotifyWebApi.getMe()\n      .then(response => {\n        this.setState({\n          username: response.display_name\n        })\n      });\n  }\n\n  render() {\n    // let user = spotifyWebApi.getMe().then( res => res.display_name);\n    console.log(this.state.username);\n    return (\n      <div className=\"App\">\n      \n      {\n        (!this.state.loggedIn) ? \n        <a href='http://localhost:8888'>\n          <button>Login with Spotify</button>\n        </a>\n        :\n        <div>\n          <div>You are logged in as {this.state.username}</div>\n          <a href='http://localhost:8888'>\n            <button>Login with a different Spotify account</button>\n          </a>\n        </div>\n          \n      }\n        <div>Now Playing: {this.state.nowPlaying.name}</div>\n        <div>\n          <img src={this.state.nowPlaying.image} style={{width: 100}}/>\n        </div>\n        <button onClick={this.getNowPlaying}>\n          Check Now Playing\n        </button>\n\n        {/* <form onSubmit={this.handleSubmit}>\n          <input type='text' onChange={this.handleChange} value = {this.state.searchParams}/>\n          <button>Submit</button>\n        </form> */}\n        <SearchBar token={spotifyWebApi.getAccessToken()}/>\n        \n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}