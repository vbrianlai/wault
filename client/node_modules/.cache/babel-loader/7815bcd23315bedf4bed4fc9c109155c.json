{"ast":null,"code":"var _jsxFileName = \"/Users/brianlai/Desktop/wault/client/src/App.js\";\nimport React, { Component } from 'react';\nimport Spotify from 'spotify-web-api-js';\nimport './App.css';\nimport SearchBar from './SearchBar';\nimport NavBar from './NavBar';\nimport User from './User';\nconst spotifyWebApi = new Spotify();\n\nclass App extends Component {\n  constructor(props) {\n    super(props); // Gets access token\n\n    const params = this.getHashParams();\n\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token);\n    }\n\n    this.state = {\n      loggedIn: params.access_token === spotifyWebApi.getAccessToken() ? true : false,\n      username: '',\n      nowPlaying: {\n        name: 'Not checked',\n        image: ''\n      },\n      userImage: null,\n      searchParams: '',\n      likedSongs: [],\n      access_token: spotifyWebApi.getAccessToken() || null\n    };\n    this.updateLikes = this.updateLikes.bind(this);\n    this.playSong = this.playSong.bind(this); // this.getCurrentPlaybackState = this.getCurrentPlaybackState.bind(this);\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n\n    return hashParams;\n  }\n\n  componentDidMount() {\n    // console.log(spotifyWebApi.getAccessToken());\n    // fetch('https://api.spotify.com/v1/me', {\n    //   headers: {\n    //     'Authorization': 'Bearer ' + spotifyWebApi.getAccessToken()\n    //   }\n    // }).then((response) => response.json())\n    // .then(data => {console.log(data)});\n    spotifyWebApi.getMe().then(res => {\n      this.setState({\n        username: res.display_name,\n        userImage: res.images[0].url\n      });\n      console.log(res);\n    }); // spotifyWebApi.getMyCurrentPlaybackState()\n    // .then(response => {\n    //   let song = response ? {name: response.item.name, image: response.item.album.images[0].url} : {name: 'unidentified', image : 'unidentified'}\n    //   console.log(response);\n    // })\n  }\n\n  getCurrentPlaybackState() {\n    spotifyWebApi.getMyCurrentPlaybackState().then(response => {\n      console.log(response);\n    });\n  }\n\n  updateLikes(likedSong) {\n    let likedSongs = this.state.likedSongs;\n\n    if (likedSongs.length === 3) {\n      likedSongs.shift();\n      likedSongs.push(likedSong);\n    } else {\n      likedSongs.push(likedSong);\n    }\n\n    this.setState({\n      likedSongs: [...likedSongs]\n    });\n  }\n\n  playSong(song) {\n    console.log(song);\n    let songs = {\n      'uris': [`${song.uri}`]\n    };\n    spotifyWebApi.play(songs);\n  }\n\n  pauseSong() {\n    spotifyWebApi.pause();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      loggedIn: this.state.loggedIn,\n      username: this.state.username,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(SearchBar, {\n      token: spotifyWebApi.getAccessToken(),\n      updateLikes: this.updateLikes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(User, {\n      userImage: this.state.userImage,\n      likedSongs: this.state.likedSongs,\n      playSong: this.playSong,\n      pauseSong: this.pauseSong,\n      playbackState: this.getCurrentPlaybackState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/brianlai/Desktop/wault/client/src/App.js"],"names":["React","Component","Spotify","SearchBar","NavBar","User","spotifyWebApi","App","constructor","props","params","getHashParams","access_token","setAccessToken","state","loggedIn","getAccessToken","username","nowPlaying","name","image","userImage","searchParams","likedSongs","updateLikes","bind","playSong","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","componentDidMount","getMe","then","res","setState","display_name","images","url","console","log","getCurrentPlaybackState","getMyCurrentPlaybackState","response","likedSong","length","shift","push","song","songs","uri","play","pauseSong","pause","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Spotify from 'spotify-web-api-js';\nimport './App.css';\nimport SearchBar from './SearchBar';\nimport NavBar from './NavBar';\nimport User from './User';\n\nconst spotifyWebApi = new Spotify();\n\n\nclass App extends Component{\n\n  constructor(props) {\n    super(props);\n\n    // Gets access token\n    const params = this.getHashParams();\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token);\n    }\n\n    this.state = {\n      loggedIn: params.access_token===spotifyWebApi.getAccessToken() ? true : false,\n      username: '',\n      nowPlaying: {\n        name: 'Not checked',\n        image: ''\n      },\n      userImage: null,\n      searchParams: '',\n      likedSongs: [],\n      access_token: spotifyWebApi.getAccessToken() || null\n    }\n\n    this.updateLikes = this.updateLikes.bind(this);\n    this.playSong = this.playSong.bind(this);\n    // this.getCurrentPlaybackState = this.getCurrentPlaybackState.bind(this);\n  }\n  \n  \n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    while ( e = r.exec(q)) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n\n  componentDidMount() {\n\n    // console.log(spotifyWebApi.getAccessToken());\n\n    // fetch('https://api.spotify.com/v1/me', {\n    //   headers: {\n    //     'Authorization': 'Bearer ' + spotifyWebApi.getAccessToken()\n    //   }\n    // }).then((response) => response.json())\n    // .then(data => {console.log(data)});\n\n    spotifyWebApi.getMe()\n      .then(res => {\n          this.setState(\n            {\n              username: res.display_name,\n              userImage: res.images[0].url\n            }\n          );\n          console.log(res);\n      });\n\n      // spotifyWebApi.getMyCurrentPlaybackState()\n      // .then(response => {\n      //   let song = response ? {name: response.item.name, image: response.item.album.images[0].url} : {name: 'unidentified', image : 'unidentified'}\n      //   console.log(response);\n      // })\n\n      \n  }\n\n  getCurrentPlaybackState() {\n    spotifyWebApi.getMyCurrentPlaybackState()\n      .then(response => {\n        console.log(response);\n      });\n  }\n\n  updateLikes(likedSong) {\n    let likedSongs = this.state.likedSongs;\n    if (likedSongs.length === 3) {\n      likedSongs.shift();\n      likedSongs.push(likedSong)\n    } else {\n      likedSongs.push(likedSong);\n    }\n    this.setState({\n      likedSongs: [...likedSongs]\n    });\n  }\n\n  playSong(song) {\n    console.log(song);\n    let songs = {\n      'uris': [`${song.uri}`]\n    };\n    spotifyWebApi.play(songs);\n  }\n\n  pauseSong() {\n    spotifyWebApi.pause();\n  }\n\n\n  render() {\n    \n    return (\n      <div className=\"App\">\n        <NavBar loggedIn={this.state.loggedIn} username={this.state.username}/> \n        \n        <SearchBar token={spotifyWebApi.getAccessToken()} updateLikes={this.updateLikes}/>\n\n        <User \n          userImage={this.state.userImage} \n          likedSongs={this.state.likedSongs} \n          playSong={this.playSong} \n          pauseSong={this.pauseSong}\n          playbackState={this.getCurrentPlaybackState}\n        />\n        \n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}