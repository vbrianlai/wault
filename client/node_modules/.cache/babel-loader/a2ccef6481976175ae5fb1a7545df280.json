{"ast":null,"code":"var _jsxFileName = \"/Users/brianlai/Desktop/wault/client/src/NowPlaying.js\";\nimport React, { Component } from 'react';\nimport './NowPlaying.css';\nimport { Card } from 'react-bootstrap';\nexport default class NowPlaying extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      playbackState: {}\n    };\n  }\n\n  componentDidUpdate(_prevProps, prevState) {\n    console.log(Object.keys(prevState.playbackState).length);\n    this.props.getPlayback().then(result => {\n      if (Object.keys(prevState.playbackState).length === 0) {\n        this.setState({\n          isLoaded: true,\n          playbackState: result\n        });\n      } else if (result.item.id !== prevState.playbackState.item.id) {\n        this.setState({\n          playbackState: result\n        });\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"NowPlaying text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(Card.Img, {\n      variant: \"top\",\n      src: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        fontFamily: 'Roboto Slab, serif'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"#NP:\"), React.createElement(\"div\", {\n      style: {\n        fontFamily: 'Roboto Slab, serif'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, this.state.isLoaded ? this.state.playbackState.item.name : 'Loading'));\n  }\n\n}","map":{"version":3,"sources":["/Users/brianlai/Desktop/wault/client/src/NowPlaying.js"],"names":["React","Component","Card","NowPlaying","constructor","props","state","isLoaded","playbackState","componentDidUpdate","_prevProps","prevState","console","log","Object","keys","length","getPlayback","then","result","setState","item","id","render","fontFamily","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,kBAAP;AACA,SAAQC,IAAR,QAAmB,iBAAnB;AAEA,eAAe,MAAMC,UAAN,SAAyBF,SAAzB,CAAmC;AAC9CG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,KADD;AAETC,MAAAA,aAAa,EAAE;AAFN,KAAb;AAIH;;AAEDC,EAAAA,kBAAkB,CAACC,UAAD,EAAaC,SAAb,EAAwB;AACtCC,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,IAAP,CAAYJ,SAAS,CAACH,aAAtB,EAAqCQ,MAAjD;AACA,SAAKX,KAAL,CAAWY,WAAX,GACCC,IADD,CACMC,MAAM,IAAI;AACR,UAAIL,MAAM,CAACC,IAAP,CAAYJ,SAAS,CAACH,aAAtB,EAAqCQ,MAArC,KAAgD,CAApD,EAAuD;AACnD,aAAKI,QAAL,CAAc;AACVb,UAAAA,QAAQ,EAAE,IADA;AAEVC,UAAAA,aAAa,EAAEW;AAFL,SAAd;AAIH,OALD,MAKO,IAAIA,MAAM,CAACE,IAAP,CAAYC,EAAZ,KAAmBX,SAAS,CAACH,aAAV,CAAwBa,IAAxB,CAA6BC,EAApD,EAAuD;AAC1D,aAAKF,QAAL,CAAc;AACVZ,UAAAA,aAAa,EAAEW;AADL,SAAd;AAGH;AACR,KAZD;AAaH;;AAEDI,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD,CAAM,GAAN;AAAU,MAAA,OAAO,EAAC,KAAlB;AAAwB,MAAA,GAAG,EAAC,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,EAII;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,UAAU,EAAE;AAAb,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,EAKI;AAAK,MAAA,KAAK,EAAE;AAACA,QAAAA,UAAU,EAAE;AAAb,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKlB,KAAL,CAAWC,QAAX,GAAsB,KAAKD,KAAL,CAAWE,aAAX,CAAyBa,IAAzB,CAA8BI,IAApD,GAA2D,SADhE,CALJ,CADJ;AAWH;;AAtC6C","sourcesContent":["import React, { Component } from 'react'\nimport './NowPlaying.css'\nimport {Card} from 'react-bootstrap';\n\nexport default class NowPlaying extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            playbackState: {}\n        }\n    }\n\n    componentDidUpdate(_prevProps, prevState) {\n        console.log(Object.keys(prevState.playbackState).length);\n        this.props.getPlayback()\n        .then(result => {\n                if (Object.keys(prevState.playbackState).length === 0) {\n                    this.setState({\n                        isLoaded: true,\n                        playbackState: result\n                    });\n                } else if (result.item.id !== prevState.playbackState.item.id){\n                    this.setState({\n                        playbackState: result\n                    });\n                }\n        });\n    }\n\n    render() {\n        return (\n            <div className='NowPlaying text-center'>\n                <Card>\n                    <Card.Img variant='top' src=''/>\n                </Card>\n                <div style={{fontFamily: 'Roboto Slab, serif'}}>#NP:</div>\n                <div style={{fontFamily: 'Roboto Slab, serif'}}>\n                    {this.state.isLoaded ? this.state.playbackState.item.name : 'Loading'}\n                </div>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}