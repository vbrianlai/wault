{"ast":null,"code":"var _jsxFileName = \"/Users/brianlai/Desktop/wault/client/src/App.js\";\nimport React, { Component } from 'react';\nimport Spotify from 'spotify-web-api-js';\nimport './App.css';\nimport SearchBar from './SearchBar';\nimport NavBar from './components/NavBar';\nimport User from './components/User';\nimport NowPlaying from './components/NowPlaying';\nconst spotifyWebApi = new Spotify();\n\nclass App extends Component {\n  constructor(props) {\n    super(props); // Gets access token\n\n    const params = this.getHashParams();\n\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token);\n    }\n\n    this.state = {\n      loggedIn: params.access_token === spotifyWebApi.getAccessToken() ? true : false,\n      username: '',\n      userImage: null,\n      likedSongs: [],\n      access_token: spotifyWebApi.getAccessToken() || null,\n      playbackState: {},\n      currentSong: {}\n    };\n    this.updateLikes = this.updateLikes.bind(this);\n    this.updateCurrent = this.updateCurrent.bind(this);\n    this.playSong = this.playSong.bind(this); // this.getCurrentPlaybackState = this.getCurrentPlaybackState.bind(this);\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n\n    return hashParams;\n  }\n  /**\n   * After component mounts, obtain User's info and playback state\n   */\n\n\n  componentDidMount() {\n    // console.log(spotifyWebApi.getAccessToken());\n    // fetch('https://api.spotify.com/v1/me', {\n    //   headers: {\n    //     'Authorization': 'Bearer ' + spotifyWebApi.getAccessToken()\n    //   }\n    // }).then((response) => response.json())\n    // .then(data => {console.log(data)});\n    spotifyWebApi.getMe().then(res => {\n      this.setState({\n        username: res.display_name,\n        userImage: res.images[0].url\n      });\n      console.log(res);\n    });\n    spotifyWebApi.getMyCurrentPlaybackState().then(response => {\n      this.setState({\n        playbackState: response\n      });\n    });\n  }\n  /**\n   * Handles adding selected song to likedSongs\n   * @param {*} likedSong - song to add\n   */\n\n\n  updateLikes(likedSong) {\n    let likedSongs = this.state.likedSongs;\n\n    if (likedSongs.length === 3) {\n      likedSongs.shift();\n      likedSongs.push(likedSong);\n    } else {\n      likedSongs.push(likedSong);\n    }\n\n    this.setState({\n      likedSongs: [...likedSongs]\n    });\n  }\n  /**\n   * Handles playing a selected song. If no song is selected, then Spotify will play the current song in queue\n   * @param {*} song - song to play\n   */\n\n\n  playSong(song) {\n    console.log(song || 'Resume');\n\n    if (!song) {\n      spotifyWebApi.play();\n    } else {\n      let songs = {\n        'uris': [`${song.uri}`]\n      };\n      spotifyWebApi.play(songs);\n    }\n  }\n  /**\n   * Pauses current track\n   */\n\n\n  pauseSong() {\n    spotifyWebApi.pause();\n  }\n  /**\n   * Keeps track of current song playing\n   * @param {*} song - current song\n   */\n\n\n  updateCurrent(song) {\n    console.log(song);\n    this.setState({\n      currentSong: song\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      username: this.state.username,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(SearchBar, {\n      token: spotifyWebApi.getAccessToken(),\n      updateLikes: this.updateLikes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(NowPlaying, {\n      currentSong: this.state.currentSong,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(User, {\n      userImage: this.state.userImage,\n      likedSongs: this.state.likedSongs,\n      playSong: this.playSong,\n      pauseSong: this.pauseSong,\n      updateCurrent: this.updateCurrent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/brianlai/Desktop/wault/client/src/App.js"],"names":["React","Component","Spotify","SearchBar","NavBar","User","NowPlaying","spotifyWebApi","App","constructor","props","params","getHashParams","access_token","setAccessToken","state","loggedIn","getAccessToken","username","userImage","likedSongs","playbackState","currentSong","updateLikes","bind","updateCurrent","playSong","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","componentDidMount","getMe","then","res","setState","display_name","images","url","console","log","getMyCurrentPlaybackState","response","likedSong","length","shift","push","song","play","songs","uri","pauseSong","pause","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Spotify from 'spotify-web-api-js';\nimport './App.css';\nimport SearchBar from './SearchBar';\nimport NavBar from './components/NavBar';\nimport User from './components/User';\nimport NowPlaying from './components/NowPlaying';\n\nconst spotifyWebApi = new Spotify();\n\n\nclass App extends Component{\n\n  constructor(props) {\n    super(props);\n\n    // Gets access token\n    const params = this.getHashParams();\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token);\n    }\n\n    this.state = {\n      loggedIn: params.access_token===spotifyWebApi.getAccessToken() ? true : false,\n      username: '',\n      userImage: null,\n      likedSongs: [],\n      access_token: spotifyWebApi.getAccessToken() || null,\n      playbackState: {},\n      currentSong: {}\n    }\n\n    this.updateLikes = this.updateLikes.bind(this);\n    this.updateCurrent = this.updateCurrent.bind(this);\n    this.playSong = this.playSong.bind(this);\n    // this.getCurrentPlaybackState = this.getCurrentPlaybackState.bind(this);\n  }\n  \n  \n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    while ( e = r.exec(q)) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n\n  /**\n   * After component mounts, obtain User's info and playback state\n   */\n  componentDidMount() {\n\n    // console.log(spotifyWebApi.getAccessToken());\n\n    // fetch('https://api.spotify.com/v1/me', {\n    //   headers: {\n    //     'Authorization': 'Bearer ' + spotifyWebApi.getAccessToken()\n    //   }\n    // }).then((response) => response.json())\n    // .then(data => {console.log(data)});\n\n    spotifyWebApi.getMe()\n      .then(res => {\n          this.setState(\n            {\n              username: res.display_name,\n              userImage: res.images[0].url\n            }\n          );\n          console.log(res);\n      });\n\n      spotifyWebApi.getMyCurrentPlaybackState()\n      .then(response => {\n        this.setState({playbackState: response})\n      })\n  }\n\n\n  /**\n   * Handles adding selected song to likedSongs\n   * @param {*} likedSong - song to add\n   */\n  updateLikes(likedSong) {\n    let likedSongs = this.state.likedSongs;\n    if (likedSongs.length === 3) {\n      likedSongs.shift();\n      likedSongs.push(likedSong)\n    } else {\n      likedSongs.push(likedSong);\n    }\n    this.setState({\n      likedSongs: [...likedSongs]\n    });\n  }\n\n  /**\n   * Handles playing a selected song. If no song is selected, then Spotify will play the current song in queue\n   * @param {*} song - song to play\n   */\n  playSong(song) {\n    console.log(song || 'Resume');\n    if (!song){\n      spotifyWebApi.play()\n    } else {\n      let songs = {\n        'uris': [`${song.uri}`]\n      };\n      spotifyWebApi.play(songs);\n    }\n  }\n\n  /**\n   * Pauses current track\n   */\n  pauseSong() {\n    spotifyWebApi.pause();\n  }\n\n  /**\n   * Keeps track of current song playing\n   * @param {*} song - current song\n   */\n  updateCurrent(song) {\n    console.log(song);\n    this.setState({currentSong: song});\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar username={this.state.username}/> \n        \n        <SearchBar token={spotifyWebApi.getAccessToken()} updateLikes={this.updateLikes}/>\n\n        <NowPlaying currentSong={this.state.currentSong}/>\n\n        <User \n          userImage={this.state.userImage} \n          likedSongs={this.state.likedSongs} \n          playSong={this.playSong} \n          pauseSong={this.pauseSong}\n          updateCurrent={this.updateCurrent}\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}